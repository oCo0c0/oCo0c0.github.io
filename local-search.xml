<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>内存溢出-String</title>
    <link href="/2023/06/20/%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA-String/"/>
    <url>/2023/06/20/%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA-String/</url>
    
    <content type="html"><![CDATA[<h1 id="内存溢出-String"><a href="#内存溢出-String" class="headerlink" title="内存溢出-String"></a>内存溢出-String</h1><h3 id="JDK1-6方法举例："><a href="#JDK1-6方法举例：" class="headerlink" title="JDK1.6方法举例："></a>JDK1.6方法举例：</h3><p>String.substring(int beginIndex, int endIndex);源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns a string that is a substring of this string. The</span><br><span class="hljs-comment">     * substring begins at the specified &#123;<span class="hljs-doctag">@code</span> beginIndex&#125; and</span><br><span class="hljs-comment">     * extends to the character at index &#123;<span class="hljs-doctag">@code</span> endIndex - 1&#125;.</span><br><span class="hljs-comment">     * Thus the length of the substring is &#123;<span class="hljs-doctag">@code</span> endIndex-beginIndex&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * Examples:</span><br><span class="hljs-comment">     * &lt;blockquote&gt;&lt;pre&gt;</span><br><span class="hljs-comment">     * &quot;hamburger&quot;.substring(4, 8) returns &quot;urge&quot;</span><br><span class="hljs-comment">     * &quot;smiles&quot;.substring(1, 5) returns &quot;mile&quot;</span><br><span class="hljs-comment">     * &lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>      beginIndex   the beginning index, inclusive.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>      endIndex     the ending index, exclusive.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>     the specified substring.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@exception</span>  IndexOutOfBoundsException  if the</span><br><span class="hljs-comment">     *             &#123;<span class="hljs-doctag">@code</span> beginIndex&#125; is negative, or</span><br><span class="hljs-comment">     *             &#123;<span class="hljs-doctag">@code</span> endIndex&#125; is larger than the length of</span><br><span class="hljs-comment">     *             this &#123;<span class="hljs-doctag">@code</span> String&#125; object, or</span><br><span class="hljs-comment">     *             &#123;<span class="hljs-doctag">@code</span> beginIndex&#125; is larger than</span><br><span class="hljs-comment">     *             &#123;<span class="hljs-doctag">@code</span> endIndex&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">substring</span><span class="hljs-params">(<span class="hljs-type">int</span> bedinIndex, <span class="hljs-type">int</span> endIndex)</span>&#123;<br>    <span class="hljs-keyword">if</span>(beginIndex &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringIndexOutOfBoundsException</span>(beginIndex);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(endIndex &gt; count)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringIndexOutOfBoundsException</span>(endIndex);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(beginIndex &gt; endIndex)&#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringIndexOutOfBoundsException</span>(endIndex - beginIndex);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ((beginIndex == <span class="hljs-number">0</span>) &amp;&amp; (endIndex == count)) ? <span class="hljs-built_in">this</span> : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(offset + beginIndex, endIndex - beginIndex, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>由源码分析可看出，substring方法在使用时，会构造一个新的String对象，问题所在也在此。</p><p>JDK1.6 String构造源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String(<span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> count, <span class="hljs-type">char</span>[] value)&#123;<br>    <span class="hljs-built_in">this</span>.value = value;<br>    <span class="hljs-built_in">this</span>.offset = offset;<br>    <span class="hljs-built_in">this</span>.count = count;<br>&#125;<br></code></pre></td></tr></table></figure><p>JDK1.6中，String类的构造函数创建时非简单拷贝对象，而是将整个value引用。问题导致较大字符串就算不再被引用，内存也不会释放。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456789&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a.substring(<span class="hljs-number">2</span>,<span class="hljs-number">8</span>);<br><span class="hljs-keyword">return</span> b;<br></code></pre></td></tr></table></figure><p>此处，字符串a只是临时的，而真正所用到的字符串b的内存数组，其实是从字符串a中共享所得。虽然字符串a本身可被回收，但其内存数据却不可释放，导致内存泄露。</p><h3 id="JDK1-8源码分析"><a href="#JDK1-8源码分析" class="headerlink" title="JDK1.8源码分析"></a>JDK1.8源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns a string that is a substring of this string. The</span><br><span class="hljs-comment"> * substring begins at the specified &#123;<span class="hljs-doctag">@code</span> beginIndex&#125; and</span><br><span class="hljs-comment"> * extends to the character at index &#123;<span class="hljs-doctag">@code</span> endIndex - 1&#125;.</span><br><span class="hljs-comment"> * Thus the length of the substring is &#123;<span class="hljs-doctag">@code</span> endIndex-beginIndex&#125;.</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Examples:</span><br><span class="hljs-comment"> * &lt;blockquote&gt;&lt;pre&gt;</span><br><span class="hljs-comment"> * &quot;hamburger&quot;.substring(4, 8) returns &quot;urge&quot;</span><br><span class="hljs-comment"> * &quot;smiles&quot;.substring(1, 5) returns &quot;mile&quot;</span><br><span class="hljs-comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>      beginIndex   the beginning index, inclusive.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>      endIndex     the ending index, exclusive.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>     the specified substring.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@exception</span>  IndexOutOfBoundsException  if the</span><br><span class="hljs-comment"> *             &#123;<span class="hljs-doctag">@code</span> beginIndex&#125; is negative, or</span><br><span class="hljs-comment"> *             &#123;<span class="hljs-doctag">@code</span> endIndex&#125; is larger than the length of</span><br><span class="hljs-comment"> *             this &#123;<span class="hljs-doctag">@code</span> String&#125; object, or</span><br><span class="hljs-comment"> *             &#123;<span class="hljs-doctag">@code</span> beginIndex&#125; is larger than</span><br><span class="hljs-comment"> *             &#123;<span class="hljs-doctag">@code</span> endIndex&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">substring</span><span class="hljs-params">(<span class="hljs-type">int</span> beginIndex, <span class="hljs-type">int</span> endIndex)</span> &#123;<br>    <span class="hljs-keyword">if</span> (beginIndex &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringIndexOutOfBoundsException</span>(beginIndex);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (endIndex &gt; value.length) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringIndexOutOfBoundsException</span>(endIndex);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">subLen</span> <span class="hljs-operator">=</span> endIndex - beginIndex;<br>    <span class="hljs-keyword">if</span> (subLen &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringIndexOutOfBoundsException</span>(subLen);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ((beginIndex == <span class="hljs-number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="hljs-built_in">this</span><br>            : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(value, beginIndex, subLen);<br>&#125;<br></code></pre></td></tr></table></figure><p>JDK1.8 String构造源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Allocates a new &#123;<span class="hljs-doctag">@code</span> String&#125; that contains characters from a subarray</span><br><span class="hljs-comment"> * of the character array argument. The &#123;<span class="hljs-doctag">@code</span> offset&#125; argument is the</span><br><span class="hljs-comment"> * index of the first character of the subarray and the &#123;<span class="hljs-doctag">@code</span> count&#125;</span><br><span class="hljs-comment"> * argument specifies the length of the subarray. The contents of the</span><br><span class="hljs-comment"> * subarray are copied; subsequent modification of the character array does</span><br><span class="hljs-comment"> * not affect the newly created string.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  value</span><br><span class="hljs-comment"> *         Array that is the source of characters</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  offset</span><br><span class="hljs-comment"> *         The initial offset</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  count</span><br><span class="hljs-comment"> *         The length</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span>  IndexOutOfBoundsException</span><br><span class="hljs-comment"> *          If the &#123;<span class="hljs-doctag">@code</span> offset&#125; and &#123;<span class="hljs-doctag">@code</span> count&#125; arguments index</span><br><span class="hljs-comment"> *          characters outside the bounds of the &#123;<span class="hljs-doctag">@code</span> value&#125; array</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">String</span><span class="hljs-params">(<span class="hljs-type">char</span> value[], <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> count)</span> &#123;<br>    <span class="hljs-keyword">if</span> (offset &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringIndexOutOfBoundsException</span>(offset);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringIndexOutOfBoundsException</span>(count);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (offset &lt;= value.length) &#123;<br>            <span class="hljs-built_in">this</span>.value = <span class="hljs-string">&quot;&quot;</span>.value;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span><br>    <span class="hljs-keyword">if</span> (offset &gt; value.length - count) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringIndexOutOfBoundsException</span>(offset + count);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);<br>&#125;<br></code></pre></td></tr></table></figure><p>在JDK1.8中，当我们需要一个子字符串的时候，substring 生成了一个新的字符串，这个字符串通过构造函数的 Arrays.copyOfRange 函数进行构造。此优化在JDK1.7时就已实现，新的实现虽然损失了性能，而且浪费了一些存储空间，但却保证了字符串的内部数组可以和字符串对象一起被回收，从而防止发生内存泄漏。</p>]]></content>
    
    
    <categories>
      
      <category>&lt;JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内存溢出，JVM调优</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stream流操作</title>
    <link href="/2023/06/10/JAVA%20Stream%E6%B5%81%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/06/10/JAVA%20Stream%E6%B5%81%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA-Stream流操作"><a href="#JAVA-Stream流操作" class="headerlink" title="JAVA Stream流操作"></a>JAVA Stream流操作</h1><p>Stream流操作分为<strong>3种类型</strong>：</p><ul><li>创建Stream</li><li>Stream中间处理</li><li>终止Steam</li></ul><h3 id="Stream特性"><a href="#Stream特性" class="headerlink" title="Stream特性"></a>Stream特性</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">1.stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。<br>2.stream不会改变数据源，通常情况下会产生一个新的集合或一个值。<br>3.stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。<br></code></pre></td></tr></table></figure><h3 id="Stream特点"><a href="#Stream特点" class="headerlink" title="Stream特点"></a>Stream特点</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-number">1.</span>代码简洁：函数编程写出的代码简洁且意图明确，使用stream接口让你从此告别<span class="hljs-keyword">for</span>循环。<br><span class="hljs-number">2.</span>多核友好：Java函数式编程使得编写并行程序从未如此简单，你需要的全部就是调用一下方法。<br><span class="hljs-number">3.</span><span class="hljs-built_in">Stream</span>不存储数据。<br><span class="hljs-number">4.</span><span class="hljs-built_in">Stream</span>不会改变源对象。相反，他们会返回一个持有结果的新<span class="hljs-built_in">Stream</span>。<br><span class="hljs-number">5.</span><span class="hljs-built_in">Stream</span>是惰性求值的（延迟执行）<br></code></pre></td></tr></table></figure><h3 id="Stream创建"><a href="#Stream创建" class="headerlink" title="Stream创建"></a>Stream创建</h3><p>1.创建步骤</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">1.创建 Stream一个数据源（如： 集合、数组）， 获取一个流。<br>2.中间操作一个中间操作链，对数据源的数据进行处理。<br>3.终止操作(终端操作)一个终止操作，执行中间操作链，并产生结果 。<br></code></pre></td></tr></table></figure><p>2.创建示例</p><p>① 通过 <code>java.util.Collection.stream()</code> 方法用集合创建流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//获取一个顺序流</span><br>Stream&lt;String&gt; stream = list.stream();<br><span class="hljs-comment">//获取一个并行流</span><br>Stream&lt;String&gt; parallelStream = list.parallelStream();<br></code></pre></td></tr></table></figure><p>② 使用<code>java.util.Arrays.stream(T[] array)</code>方法用数组创建流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;;<br><span class="hljs-type">IntStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> Arrays.stream(array);<br></code></pre></td></tr></table></figure><p>③ 使用<code>Stream</code>的静态方法：<code>of()、iterate()、generate()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream&lt;Integer&gt; stream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>stream.forEach(System.out::println);<br>Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="hljs-number">0</span>, (x) -&gt; x + <span class="hljs-number">3</span>).limit(<span class="hljs-number">4</span>);<br>stream2.forEach(System.out::println);<br>Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class="hljs-number">3</span>);<br>stream3.forEach(System.out::println);<br></code></pre></td></tr></table></figure><h4 id="◆开始管道"><a href="#◆开始管道" class="headerlink" title="◆开始管道"></a>◆开始管道</h4><p>主要负责新建一个Stream流，或者基于现有的数组、List、Set、Map等集合类型对象创建出新的Stream流。</p><table><thead><tr><th><strong>流方法</strong></th><th>功能说明</th></tr></thead><tbody><tr><td>stream()</td><td>创建出一个新的stream串行流对象</td></tr><tr><td>parallelStream()</td><td>创建出一个可并行执行的stream流对象</td></tr><tr><td>Stream.of()</td><td>通过给定的一系列元素创建一个新的Stream串行流对象</td></tr></tbody></table><h4 id="◆中间管道"><a href="#◆中间管道" class="headerlink" title="◆中间管道"></a>◆中间管道</h4><p>负责对Stream进行处理操作，并返回一个新的Stream对象，中间管道操作可以进行<strong>叠加</strong>。</p><table><thead><tr><th><strong>流方法</strong></th><th>功能说明</th></tr></thead><tbody><tr><td>filter()</td><td>按照条件过滤符合要求的元素， 返回新的stream流</td></tr><tr><td>map()</td><td>将已有元素转换为另一个对象类型，一对一逻辑，返回新的stream流</td></tr><tr><td>flatMap()</td><td>将已有元素转换为另一个对象类型，一对多逻辑，即原来一个元素对象可能会转换为1个或者多个新类型的元素，返回新的stream流</td></tr><tr><td>limit()</td><td>仅保留集合前面指定个数的元素，返回新的stream流</td></tr><tr><td>skip()</td><td>跳过集合前面指定个数的元素，返回新的stream流</td></tr><tr><td>concat()</td><td>将两个流的数据合并起来为1个新的流，返回新的stream流</td></tr><tr><td>distinct()</td><td>对Stream中所有元素进行去重，返回新的stream流</td></tr><tr><td>sorted()</td><td>对stream中所有的元素按照指定规则进行排序，返回新的stream流</td></tr><tr><td>peek()</td><td>对stream流中的每个元素进行逐个遍历处理，返回处理后的stream流</td></tr></tbody></table><h4 id="◆终止管道"><a href="#◆终止管道" class="headerlink" title="◆终止管道"></a>◆终止管道</h4><p>顾名思义，通过终止管道操作之后，Stream流将<strong>会结束</strong>，最后可能会执行某些逻辑处理，或者是按照要求返回某些执行后的结果数据。</p><table><thead><tr><th><strong>流方法</strong></th><th>功能说明</th></tr></thead><tbody><tr><td>count()</td><td>返回stream处理后最终的元素个数</td></tr><tr><td>max()</td><td>返回stream处理后的元素最大值</td></tr><tr><td>min()</td><td>返回stream处理后的元素最小值</td></tr><tr><td>findFirst()</td><td>找到第一个符合条件的元素时则终止流处理</td></tr><tr><td>findAny()</td><td>找到任何一个符合条件的元素时则退出流处理，这个<strong>对于串行流时与findFirst相同，对于并行流时比较高效</strong>，任何分片中找到都会终止后续计算逻辑</td></tr><tr><td>anyMatch()</td><td>返回一个boolean值，类似于isContains(),用于判断是否有符合条件的元素</td></tr><tr><td>allMatch()</td><td>返回一个boolean值，用于判断是否所有元素都符合条件</td></tr><tr><td>noneMatch()</td><td>返回一个boolean值， 用于判断是否所有元素都不符合条件</td></tr><tr><td>collect()</td><td>将流转换为指定的类型，通过Collectors进行指定</td></tr><tr><td>toArray()</td><td>将流转换为数组</td></tr><tr><td>iterator()</td><td>将流转换为Iterator对象</td></tr><tr><td>foreach()</td><td>无返回值，对元素进行逐个遍历，然后执行给定的处理逻辑</td></tr></tbody></table><h2 id="◆Stream方法使用"><a href="#◆Stream方法使用" class="headerlink" title="◆Stream方法使用"></a>◆Stream方法使用</h2><h4 id="◆-map和flatMap"><a href="#◆-map和flatMap" class="headerlink" title="◆ map和flatMap"></a>◆ map和flatMap</h4><p>map与flatMap都是用于转换已有的元素为其它元素，区别点在于：</p><ul><li>map <strong>必须是一对一的</strong>，即每个元素都只能转换为1个新的元素</li><li>flatMap <strong>可以是一对多的</strong>，即每个元素都可以转换为1个或者多个新的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stringToIntMap</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; ids = Arrays.asList(<span class="hljs-string">&quot;205&quot;</span>, <span class="hljs-string">&quot;105&quot;</span>, <span class="hljs-string">&quot;308&quot;</span>, <span class="hljs-string">&quot;469&quot;</span>, <span class="hljs-string">&quot;627&quot;</span>, <span class="hljs-string">&quot;193&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>);<br>    <span class="hljs-comment">// 使用流操作</span><br>    List&lt;User&gt; results = ids.stream()<br>            .map(id -&gt; &#123;<br>                <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>                user.setId(id);<br>                <span class="hljs-keyword">return</span> user;<br>            &#125;)<br>            .collect(Collectors.toList());<br>    System.out.println(results);<br>&#125;<br><span class="hljs-comment">// 执行结果</span><br>[User&#123;id=<span class="hljs-string">&#x27;205&#x27;</span>&#125;, <br> User&#123;id=<span class="hljs-string">&#x27;105&#x27;</span>&#125;,<br> User&#123;id=<span class="hljs-string">&#x27;308&#x27;</span>&#125;, <br> User&#123;id=<span class="hljs-string">&#x27;469&#x27;</span>&#125;, <br> User&#123;id=<span class="hljs-string">&#x27;627&#x27;</span>&#125;, <br> User&#123;id=<span class="hljs-string">&#x27;193&#x27;</span>&#125;, <br> User&#123;id=<span class="hljs-string">&#x27;111&#x27;</span>&#125;]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stringToIntFlatmap</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; sentences = Arrays.asList(<span class="hljs-string">&quot;hello world&quot;</span>,<span class="hljs-string">&quot;coco&quot;</span>);<br>    <span class="hljs-comment">// 使用流操作</span><br>    List&lt;String&gt; results = sentences.stream()<br>            .flatMap(sentence -&gt; Arrays.stream(sentence.split(<span class="hljs-string">&quot; &quot;</span>)))<br>            .collect(Collectors.toList());<br>    System.out.println(results);<br>&#125;<br><span class="hljs-comment">// 执行结果</span><br>[hello, world, coco]<br></code></pre></td></tr></table></figure><p>flatMap操作的时候是先将每个元素处理并返回一个新的Stream，然后将多个Stream展开合并为了一个完整的新的Stream。</p><h4 id="◆-peek和foreach"><a href="#◆-peek和foreach" class="headerlink" title="◆ peek和foreach"></a><strong>◆</strong> peek和foreach</h4><p>对元素进行遍历然后逐个的进行处理。</p><p>peek属于中间方法，只能作为管道中途的一个处理步骤，而没法直接执行得到结果，其后面必须还要有其它终止操作的时候才会被执行；</p><p>foreach属于终止方法，可以直接执行相关操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPeekAndforeach</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; sentences = Arrays.asList(<span class="hljs-string">&quot;hello world&quot;</span>,<span class="hljs-string">&quot;coco&quot;</span>);<br>    <span class="hljs-comment">// 演示点1：仅peek操作，最终不会执行</span><br>    System.out.println(<span class="hljs-string">&quot;----before peek----&quot;</span>);<br>    sentences.stream().peek(sentence -&gt; System.out.println(sentence));<br>    System.out.println(<span class="hljs-string">&quot;----after peek----&quot;</span>);<br>    <span class="hljs-comment">// 演示点2：仅foreach操作，最终会执行</span><br>    System.out.println(<span class="hljs-string">&quot;----before foreach----&quot;</span>);<br>    sentences.stream().forEach(sentence -&gt; System.out.println(sentence));<br>    System.out.println(<span class="hljs-string">&quot;----after foreach----&quot;</span>);<br>    <span class="hljs-comment">// 演示点3：peek操作后面增加终止操作，peek会执行</span><br>    System.out.println(<span class="hljs-string">&quot;----before peek and count----&quot;</span>);<br>    sentences.stream().peek(sentence -&gt; System.out.println(sentence)).count();<br>    System.out.println(<span class="hljs-string">&quot;----after peek and count----&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 执行结果</span><br>----before peek----<br>----after peek----<br>----before foreach----<br>hello world<br>coco<br>----after foreach----<br>----before peek and count----<br>hello world<br>coco<br>----after peek and count----<br></code></pre></td></tr></table></figure><h4 id="◆-filter、sorted、distinct、limit"><a href="#◆-filter、sorted、distinct、limit" class="headerlink" title="◆ filter、sorted、distinct、limit"></a>◆ filter、sorted、distinct、limit</h4><p>都是常用的Stream的中间操作方法,可以根据需要选择一个或者多个进行组合使用，或者同时使用多个相同方法的组合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetTargetUsers</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Dept&gt; ids = Arrays.asList(<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;99&quot;</span>,<span class="hljs-string">&quot;999&quot;</span>,<span class="hljs-string">&quot;9999&quot;</span>,<span class="hljs-string">&quot;99999&quot;</span>)<br>        .stream()<br>        <span class="hljs-comment">// 使用filter过滤掉不符合条件的数据</span><br>        .filter(s -&gt; s.length() &gt; <span class="hljs-number">2</span>)<br>        <span class="hljs-comment">// 通过distinct对存量元素进行去重操作</span><br>        .distinct()<br>        <span class="hljs-comment">// 通过map操作将字符串转成整数类型</span><br>        .map(Integer::valueOf)<br>        <span class="hljs-comment">// 指定按照数字大小正序排列</span><br>        .sorted(Comparator.comparingInt(o -&gt; o))<br>        <span class="hljs-comment">// 使用limit截取排在前3位的元素</span><br>        .limit(<span class="hljs-number">3</span>)<br>        <span class="hljs-comment">// 使用map将id转为Dept对象类型</span><br>        .map(id -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dept</span>(id))<br>        <span class="hljs-comment">// 使用collect终止操作将最终处理后的数据收集到list中</span><br>        .collect(Collectors.toList());<br>    System.out.println(results);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="◆简单结果终止方法"><a href="#◆简单结果终止方法" class="headerlink" title="◆简单结果终止方法"></a>◆简单结果终止方法</h4><p>count、max、min、findAny、findFirst、anyMatch、allMatch、nonneMatch,结果形式是数字、布尔值或者Optional对象值等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleStopOptions</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; ids = Arrays.asList(<span class="hljs-string">&quot;205&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;308&quot;</span>, <span class="hljs-string">&quot;49&quot;</span>, <span class="hljs-string">&quot;627&quot;</span>, <span class="hljs-string">&quot;193&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;193&quot;</span>);<br>    <span class="hljs-comment">// 统计stream操作后剩余的元素个数</span><br>    System.out.println(ids.stream().filter(s -&gt; s.length() &gt; <span class="hljs-number">2</span>).count());<br>    <span class="hljs-comment">// 判断是否有元素值等于205</span><br>    System.out.println(ids.stream().filter(s -&gt; s.length() &gt; <span class="hljs-number">2</span>).anyMatch(<span class="hljs-string">&quot;205&quot;</span>::equals));<br>    <span class="hljs-comment">// findFirst操作</span><br>    ids.stream().filter(s -&gt; s.length() &gt; <span class="hljs-number">2</span>)<br>            .findFirst()<br>            .ifPresent(s -&gt; System.out.println(<span class="hljs-string">&quot;findFirst:&quot;</span> + s));<br>&#125;<br><span class="hljs-comment">// 输出结果</span><br><span class="hljs-number">6</span><br><span class="hljs-literal">true</span><br>findFirst:<span class="hljs-number">205</span><br></code></pre></td></tr></table></figure><h5 id="一旦被执行了终止操作之后，后续便不可以再读这个流执行其他的操作"><a href="#一旦被执行了终止操作之后，后续便不可以再读这个流执行其他的操作" class="headerlink" title="一旦被执行了终止操作之后，后续便不可以再读这个流执行其他的操作"></a><strong>一旦被执行了终止操作之后，后续便不可以再读这个流执行其他的操作</strong></h5><h4 id="◆结果收集终止方法"><a href="#◆结果收集终止方法" class="headerlink" title="◆结果收集终止方法"></a>◆结果收集终止方法</h4><p>结果数据：</p><ul><li>一个集合类，比如List、Set或者HashMap等;</li><li>StringBuilder对象，支持将多个字符串进行拼接处理并输出拼接后结果;</li><li>一个可以记录个数或者计算总和的对象（数据批量运算统计）。</li></ul><h5 id="◆生成集合"><a href="#◆生成集合" class="headerlink" title="◆生成集合"></a>◆生成集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCollectStopOptions</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Dept&gt; ids = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dept</span>(<span class="hljs-number">17</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dept</span>(<span class="hljs-number">22</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dept</span>(<span class="hljs-number">23</span>));<br>    <span class="hljs-comment">// collect成list</span><br>    List&lt;Dept&gt; collectList = ids.stream().filter(dept -&gt; dept.getId() &gt; <span class="hljs-number">20</span>)<br>            .collect(Collectors.toList());<br>    System.out.println(<span class="hljs-string">&quot;collectList:&quot;</span> + collectList);<br>    <span class="hljs-comment">// collect成Set</span><br>    Set&lt;Dept&gt; collectSet = ids.stream().filter(dept -&gt; dept.getId() &gt; <span class="hljs-number">20</span>)<br>            .collect(Collectors.toSet());<br>    System.out.println(<span class="hljs-string">&quot;collectSet:&quot;</span> + collectSet);<br>    <span class="hljs-comment">// collect成HashMap，key为id，value为Dept对象</span><br>    Map&lt;Integer, Dept&gt; collectMap = ids.stream().filter(dept -&gt; dept.getId() &gt; <span class="hljs-number">20</span>)<br>            .collect(Collectors.toMap(Dept::getId, dept -&gt; dept));<br>    System.out.println(<span class="hljs-string">&quot;collectMap:&quot;</span> + collectMap);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="◆生成拼接字符串"><a href="#◆生成拼接字符串" class="headerlink" title="◆生成拼接字符串"></a>◆生成拼接字符串</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCollectJoinStrings</span><span class="hljs-params">()</span> &#123;<br>    List&lt;String&gt; ids = Arrays.asList(<span class="hljs-string">&quot;205&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;308&quot;</span>, <span class="hljs-string">&quot;49&quot;</span>, <span class="hljs-string">&quot;627&quot;</span>, <span class="hljs-string">&quot;193&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;193&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">joinResult</span> <span class="hljs-operator">=</span> ids.stream().collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;拼接后：&quot;</span> + joinResult);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="◆数据批量数学运算"><a href="#◆数据批量数学运算" class="headerlink" title="◆数据批量数学运算"></a>◆数据批量数学运算</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNumberCalculate</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Integer&gt; ids = Arrays.asList(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>);<br>    <span class="hljs-comment">// 计算平均值</span><br>    <span class="hljs-type">Double</span> <span class="hljs-variable">average</span> <span class="hljs-operator">=</span> ids.stream().collect(Collectors.averagingInt(value -&gt; value));<br>    System.out.println(<span class="hljs-string">&quot;平均值：&quot;</span> + average);<br>    <span class="hljs-comment">// 数据统计信息</span><br>    <span class="hljs-type">IntSummaryStatistics</span> <span class="hljs-variable">summary</span> <span class="hljs-operator">=</span> ids.stream().collect(Collectors.summarizingInt(value -&gt; value));<br>    System.out.println(<span class="hljs-string">&quot;数据统计信息：&quot;</span> + summary);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="◆并行Stream"><a href="#◆并行Stream" class="headerlink" title="◆并行Stream"></a>◆并行Stream</h4><h5 id="◆Stream-API代替for循环"><a href="#◆Stream-API代替for循环" class="headerlink" title="◆Stream API代替for循环"></a>◆Stream API代替for循环</h5><p>省略</p><h5 id="◆将数组转换为管道流"><a href="#◆将数组转换为管道流" class="headerlink" title="◆将数组转换为管道流"></a>◆将数组转换为管道流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] array = &#123;<span class="hljs-string">&quot;&quot;</span>&#125;;<br>Stream&lt;String&gt; nameStrs2 = Stream.of(array);<br>Stream&lt;String&gt; nameStrs3 = Stream.of(<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="将集合类对象转换为管道流"><a href="#将集合类对象转换为管道流" class="headerlink" title="将集合类对象转换为管道流"></a>将集合类对象转换为管道流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;&quot;</span>);<br>Stream&lt;String&gt; streamFromList = list.stream();<br>Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(list);<br>Stream&lt;String&gt; streamFromSet = set.stream();<br></code></pre></td></tr></table></figure><h5 id="将文本文件转换为管道流"><a href="#将文本文件转换为管道流" class="headerlink" title="将文本文件转换为管道流"></a>将文本文件转换为管道流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class="hljs-string">&quot;file.txt&quot;</span>));<br></code></pre></td></tr></table></figure><h5 id="◆filter与谓语逻辑"><a href="#◆filter与谓语逻辑" class="headerlink" title="◆filter与谓语逻辑"></a>◆filter与谓语逻辑</h5><p>Predicate接口</p><h5 id="and语法（并集）"><a href="#and语法（并集）" class="headerlink" title="and语法（并集）"></a>and语法（并集）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Employee&gt; filtered = employees.stream()<br>        .filter(Employee.ageGreaterThan70.and(Employee.genderM))<br>        .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h5 id="or语法（交集）"><a href="#or语法（交集）" class="headerlink" title="or语法（交集）"></a>or语法（交集）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Employee&gt; filtered = employees.stream()<br>        .filter(Employee.ageGreaterThan70.or(Employee.genderM))<br>        .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h5 id="negate语法（取反）"><a href="#negate语法（取反）" class="headerlink" title="negate语法（取反）"></a>negate语法（取反）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Employee&gt; filtered = employees.stream()<br>        .filter(Employee.ageGreaterThan70.or(Employee.genderM).negate())<br>        .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h3 id="Stream管道流的map操作"><a href="#Stream管道流的map操作" class="headerlink" title="Stream管道流的map操作"></a>Stream管道流的map操作</h3><h5 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 全部转换成大写</span><br>List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;Coco&quot;</span>, <span class="hljs-string">&quot;Liming&quot;</span>, <span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-string">&quot;lisa&quot;</span>);<br>List&lt;String&gt; collect = list.stream().map(String::toUpperCase).collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h5 id="处理非字符串类型集合元素"><a href="#处理非字符串类型集合元素" class="headerlink" title="处理非字符串类型集合元素"></a>处理非字符串类型集合元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; lengths = alpha.stream()<br>        .map(String::length)<br>        .collect(Collectors.toList());<br><span class="hljs-comment">// [6, 4, 7, 5]</span><br>Stream.of(<span class="hljs-string">&quot;Monkey&quot;</span>, <span class="hljs-string">&quot;Lion&quot;</span>, <span class="hljs-string">&quot;Giraffe&quot;</span>, <span class="hljs-string">&quot;Lemur&quot;</span>)<br>        .mapToInt(String::length);<br><span class="hljs-number">6</span><br><span class="hljs-number">4</span><br><span class="hljs-number">7</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h5 id="处理对象数据格式转换"><a href="#处理对象数据格式转换" class="headerlink" title="处理对象数据格式转换"></a>处理对象数据格式转换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将每一个Employee的年龄增加一岁</span><br><span class="hljs-comment">// 将性别中的“M”换成“male”，F换成Female</span><br> List&lt;Employee&gt; maped = list.stream()<br>            .peek(e -&gt; &#123;<br>                e.setAge(e.getAge() + <span class="hljs-number">1</span>);<br>                e.setGender(e.getGender().equals(<span class="hljs-string">&quot;M&quot;</span>)?<span class="hljs-string">&quot;male&quot;</span>:<span class="hljs-string">&quot;female&quot;</span>);<br>            &#125;).collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; words = Arrays.asList(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;word&quot;</span>);<br><span class="hljs-comment">// map处理</span><br>words.stream()<br>        .map(w -&gt; Arrays.stream(w.split(<span class="hljs-string">&quot;&quot;</span>)));<br><span class="hljs-comment">// 输出</span><br>[[h,e,l,l,o],[w,o,r,l,d]]<br><span class="hljs-comment">// flatMap处理</span><br>words.stream()<br>        .flatMap(w -&gt; Arrays.stream(w.split(<span class="hljs-string">&quot;&quot;</span>)));<br><span class="hljs-comment">// 输出</span><br>[h,e,l,l,o,w,o,r,l,d]<br></code></pre></td></tr></table></figure><h3 id="状态与并行操作"><a href="#状态与并行操作" class="headerlink" title="状态与并行操作"></a>状态与并行操作</h3><h5 id="中间操作：有状态与无状态"><a href="#中间操作：有状态与无状态" class="headerlink" title="中间操作：有状态与无状态"></a>中间操作：有状态与无状态</h5><ul><li><p>filter与map操作，不需要管道流的前面后面元素相关，所以不需要额外的记录元素之间的关系。输入一个元素，获得一个结果。</p></li><li><p>sorted是排序操作、distinct是去重操作。像这种操作都是和别的元素相关的操作，我自己无法完成整体操作。就像班级点名就是无状态的，喊到你你就答到就可以了。如果是班级同学按大小个排序，那就不是你自己的事了，你得和周围的同学比一下身高并记住，你记住的这个身高比较结果就是一种“状态”。所以这种操作就是有状态操作。</p><h5 id="Limit与Skip管道数据截取"><a href="#Limit与Skip管道数据截取" class="headerlink" title="Limit与Skip管道数据截取"></a>Limit与Skip管道数据截取</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; limitN = Stream.of(<span class="hljs-string">&quot;Monkey&quot;</span>, <span class="hljs-string">&quot;Lion&quot;</span>, <span class="hljs-string">&quot;Giraffe&quot;</span>, <span class="hljs-string">&quot;Lemur&quot;</span>)<br>        .limit(<span class="hljs-number">2</span>)<br>        .collect(Collectors.toList());<br>List&lt;String&gt; skipN = Stream.of(<span class="hljs-string">&quot;Monkey&quot;</span>, <span class="hljs-string">&quot;Lion&quot;</span>, <span class="hljs-string">&quot;Giraffe&quot;</span>, <span class="hljs-string">&quot;Lemur&quot;</span>)<br>        .skip(<span class="hljs-number">2</span>)<br>        .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><ul><li><p>limt方法传入一个整数n，用于截取管道中的前n个元素。经过管道处理之后的数据是：[Monkey, Lion]。</p></li><li><p>skip方法与limit方法的使用相反，用于跳过前n个元素，截取从n到末尾的元素。经过管道处理之后的数据是：[Giraffe, Lemur]。</p><h5 id="Distinct元素去重"><a href="#Distinct元素去重" class="headerlink" title="Distinct元素去重"></a>Distinct元素去重</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; uniqueAnimals = Stream.of(<span class="hljs-string">&quot;Monkey&quot;</span>, <span class="hljs-string">&quot;Lion&quot;</span>, <span class="hljs-string">&quot;Giraffe&quot;</span>, <span class="hljs-string">&quot;Lemur&quot;</span>, <span class="hljs-string">&quot;Lion&quot;</span>)<br>    .distinct()<br>    .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h5 id="Sorted排序"><a href="#Sorted排序" class="headerlink" title="Sorted排序"></a>Sorted排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; alphabeticOrder = Stream.of(<span class="hljs-string">&quot;Monkey&quot;</span>, <span class="hljs-string">&quot;Lion&quot;</span>, <span class="hljs-string">&quot;Giraffe&quot;</span>, <span class="hljs-string">&quot;Lemur&quot;</span>)<br>        .sorted()<br>        .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h5 id="串行、并行与顺序"><a href="#串行、并行与顺序" class="headerlink" title="串行、并行与顺序"></a>串行、并行与顺序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream.of(<span class="hljs-string">&quot;Monkey&quot;</span>, <span class="hljs-string">&quot;Lion&quot;</span>, <span class="hljs-string">&quot;Giraffe&quot;</span>, <span class="hljs-string">&quot;Lemur&quot;</span>, <span class="hljs-string">&quot;Lion&quot;</span>)<br>    .parallel()<br>    .forEach(System.out::println);<br></code></pre></td></tr></table></figure><p>parallel()函数表示对管道中的元素进行并行处理,元素的顺序无法保证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Comparator接口</span><br>list.stream().sorted(Comparator.naturalOrder());<br><span class="hljs-comment">// Comparator.naturalOrder()-&gt;自然排序</span><br><span class="hljs-comment">// Comparator.reverseOrder()-&gt;倒序排序</span><br></code></pre></td></tr></table></figure><p>对象字段排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">users.sort(Comparator.comparing(User::getAge));<br><span class="hljs-comment">// 倒序</span><br>users.sort(Comparator.comparing(User::getAge).reversed());<br></code></pre></td></tr></table></figure><p>Comparator链对List排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">users.sort(<br>        Comparator.comparing(User::getGender)<br>        .thenComparing(User::getAge)<br>        .reversed()<br>);<br><span class="hljs-comment">// 都是正序 ，不加reversed</span><br><span class="hljs-comment">// 都是倒序，最后面加一个reserved</span><br><span class="hljs-comment">// 先是倒序（加reserved），然后正序</span><br><span class="hljs-comment">// 先是正序（加reserved），然后倒序（加reserved）</span><br></code></pre></td></tr></table></figure><h3 id="函数式接口Comparator"><a href="#函数式接口Comparator" class="headerlink" title="函数式接口Comparator"></a>函数式接口Comparator</h3><p>函数式接口:<strong>只能有一个抽象方法的接口</strong></p><h5 id="函数式接口的特点"><a href="#函数式接口的特点" class="headerlink" title="函数式接口的特点"></a>函数式接口的特点</h5><ul><li>接口有且仅有一个抽象方法；</li><li>允许定义静态非抽象方法；</li><li>允许定义默认defalut非抽象方法（default方法也是java8才有的，见下文）；</li><li>允许java.lang.Object中的public方法，如：equals方法；</li><li>FunctionInterface注解不是必须的，如果一个接口符合”函数式接口”定义，那么加不加该注解都没有影响。加上该注解能够更好地让编译器进行检查。如果编写的不是函数式接口，但是加上了@FunctionInterface，那么编译器会报错,见源码查看。</li><li><strong>lambda表达式是只实现接口中唯一的抽象方法的匿名实现类</strong>。</li></ul><h5 id="default关键字"><a href="#default关键字" class="headerlink" title="default关键字"></a>default关键字</h5><p>java8之前</p><ul><li>接口是不能有方法的实现，所有方法全都是抽象方法</li><li>实现接口就必须实现接口里面的所有方法</li><li>问题：<strong>当一个接口有很多的实现类的时候,修改这个接口就变成了一个非常麻烦的事,需要修改这个接口的所有实现类</strong>。</li></ul><p>java8引入default方法</p><ul><li>default方法可以有自己的默认实现，即有方法体。</li><li>接口实现类可以不去实现default方法，并且可以使用default方法。</li></ul><h5 id="JDK中的函数式接口举例"><a href="#JDK中的函数式接口举例" class="headerlink" title="JDK中的函数式接口举例"></a>JDK中的函数式接口举例</h5><p>java.lang.Runnable,</p><p>java.util.Comparator,</p><p>java.util.concurrent.Callable</p><p>java.util.function包下的接口，如Consumer、Predicate、Supplier等</p><h5 id="自定义Comparator排序"><a href="#自定义Comparator排序" class="headerlink" title="自定义Comparator排序"></a>自定义Comparator排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">users.sort(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;User&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(User u1, User u2)</span> &#123;<br>        <span class="hljs-keyword">if</span>(u1.getAge() == u2.getAge())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> u1.getAge() - u2.getAge() &gt; <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span>:<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// lambda</span><br>users.sort((u1,u2) -&gt; &#123;<br>    <span class="hljs-keyword">if</span>(u1.getAge() == u2.getAge())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> u1.getAge() - u2.getAge() &gt; <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span>:<span class="hljs-number">1</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="查找与匹配元素"><a href="#查找与匹配元素" class="headerlink" title="查找与匹配元素"></a>查找与匹配元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// anyMatch 一个符合就可以</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isExistAgeThan70</span> <span class="hljs-operator">=</span> employees.stream().anyMatch(Employee.ageGreaterThan70);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isExistAgeThan72</span> <span class="hljs-operator">=</span> employees.stream().anyMatch(e -&gt; e.getAge() &gt; <span class="hljs-number">72</span>);<br><span class="hljs-comment">// allMatch 全部符合</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isExistAgeThan10</span> <span class="hljs-operator">=</span> employees.stream().allMatch(e -&gt; e.getAge() &gt; <span class="hljs-number">10</span>);<br><span class="hljs-comment">// noneMatch 全部不符合</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isExistAgeLess18</span> <span class="hljs-operator">=</span> employees.stream().noneMatch(e -&gt; e.getAge() &lt; <span class="hljs-number">18</span>);<br></code></pre></td></tr></table></figure><h5 id="元素查找与Optional"><a href="#元素查找与Optional" class="headerlink" title="元素查找与Optional"></a>元素查找与Optional</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查找第一个年龄大于40的员工</span><br>Optional&lt;Employee&gt; employeeOptional = employees.stream()<br>    .filter(e -&gt; e.getAge() &gt; <span class="hljs-number">40</span>).findFirst();<br></code></pre></td></tr></table></figure><p>Optional类代表一个值存在或者不存在</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tex">isPresent() 将在 Optional 包含值的时候返回 true,否则返回 false;<br>ifPresent(Consumer block) 会在值存在的时候执行给定的代码块;<br>T get() 会在值存在时返回值，否则?出一个 NoSuchElement 异常;<br>T orElse(T other) 会在值存在时返回值,否则返回一个默认值;<br>findFirst用于查找第一个符合“匹配规则”的元素，返回值为Optional;<br>findAny用于查找任意一个符合“匹配规则”的元素，返回值为Optional。<br></code></pre></td></tr></table></figure><h3 id="元素归约"><a href="#元素归约" class="headerlink" title="元素归约"></a>元素归约</h3><p>Stream.reduce用来实现集合元素的归约，reduce函数有三个参数：</p><ul><li>Identity标识：一个元素，它是归约操作的初始值，如果流为空，则为默认结果。</li><li>Accumulator累加器：具有两个参数的函数：归约运算的部分结果和流的下一个元素。</li><li>Combiner合并器（可选）：当归约并行化时，或当累加器参数的类型与累加器实现的类型不匹配时，用于合并归约操作的部分结果的函数。累加器：阶段累加结果作为累加器的第一个参数；集合遍历元素作为累加器的第二个参数。</li><li>reduce初始值为0，累加器可以是lambda表达式，也可以是方法引用。</li></ul><h5 id="Integer类型归约"><a href="#Integer类型归约" class="headerlink" title="Integer类型归约"></a>Integer类型归约</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> numbers<br>        .stream()<br>        .reduce(<span class="hljs-number">0</span>, (subtotal, element) -&gt; subtotal + element);<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> numbers<br>        .stream()<br>        .reduce(<span class="hljs-number">0</span>, Integer::sum);<br><span class="hljs-comment">// 21</span><br></code></pre></td></tr></table></figure><h5 id="String类型归约"><a href="#String类型归约" class="headerlink" title="String类型归约"></a>String类型归约</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; letters = Arrays.asList(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> letters<br>        .stream()<br>        .reduce(<span class="hljs-string">&quot;&quot;</span>, (partialString, element) -&gt; partialString + element);<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> letters<br>        .stream()<br>        .reduce(<span class="hljs-string">&quot;&quot;</span>, String::concat);<br><span class="hljs-comment">// abcde</span><br></code></pre></td></tr></table></figure><h5 id="复杂对象归约"><a href="#复杂对象归约" class="headerlink" title="复杂对象归约"></a>复杂对象归约</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 计算所有的员工的年龄总和。</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> employees.stream().map(Employee::getAge).reduce(<span class="hljs-number">0</span>,Integer::sum);<br></code></pre></td></tr></table></figure><h5 id="Combiner合并器的使用"><a href="#Combiner合并器的使用" class="headerlink" title="Combiner合并器的使用"></a>Combiner合并器的使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> employees.stream()<br>        .reduce(<span class="hljs-number">0</span>,(totalAge,emp) -&gt; totalAge + emp.getAge(),Integer::sum); <br><span class="hljs-comment">// 并行</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> employees<br>        .parallelStream()<br>        .map(Employee::getAge)<br>        .reduce(<span class="hljs-number">0</span>,Integer::sum,Integer::sum);<br></code></pre></td></tr></table></figure><h3 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 收集为Set，Set会去重</span><br>Set&lt;String&gt; collectToSet = Stream.of(...).collect(Collectors.toSet());<br><span class="hljs-comment">// 收集为List</span><br>List&lt;String&gt; collectToList = Stream.of(...).collect(Collectors.toList());<br><span class="hljs-comment">// 通用的收集</span><br>LinkedList&lt;String&gt; collectToCollection = Stream.of(...)<br>    .collect(Collectors.toCollection(LinkedList::<span class="hljs-keyword">new</span>));<br><span class="hljs-comment">// 收集到Array</span><br>String[] toArray = Stream.of(...).toArray(String[]::<span class="hljs-keyword">new</span>);<br><span class="hljs-comment">// 收集到Map</span><br>Map&lt;String, Integer&gt; toMap = Stream.of(...)<br>.distinct()<br>.collect(Collectors.toMap(<br>       Function.identity(),   <span class="hljs-comment">// key</span><br>       s -&gt; (<span class="hljs-type">int</span>) s.chars().distinct().count()<span class="hljs-comment">// value</span><br>));<br><span class="hljs-comment">// 分组收集groupingBy</span><br>Map&lt;Character, List&lt;String&gt;&gt; groupingByList = Stream.of(...)<br>.collect(Collectors.groupingBy(<br>       s -&gt; 条件, 收集器<br>));<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断管道中是否包含2，结果是: true</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">containsTwo</span> <span class="hljs-operator">=</span> IntStream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).anyMatch(i -&gt; i == <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// 管道中元素数据总计结果nrOfAnimals: 4</span><br><span class="hljs-type">long</span> <span class="hljs-variable">nrOfAnimals</span> <span class="hljs-operator">=</span> Stream.of(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>).count();<br><br><span class="hljs-comment">// 管道中元素数据累加结果sum: 6</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> IntStream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).sum();<br><br><span class="hljs-comment">// 管道中元素数据平均值average: OptionalDouble[2.0]</span><br><span class="hljs-type">OptionalDouble</span> <span class="hljs-variable">average</span> <span class="hljs-operator">=</span> IntStream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).average();<br><br><span class="hljs-comment">// 管道中元素数据最大值max: 3</span><br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> IntStream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).max().orElse(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 全面统计的结果statistics: IntSummaryStatistics&#123;count=3, sum=6, min=1, average=2.000000, max=3&#125;</span><br><span class="hljs-type">IntSummaryStatistics</span> <span class="hljs-variable">statistics</span> <span class="hljs-operator">=</span> IntStream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).summaryStatistics();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>&lt;流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis</title>
    <link href="/2023/05/27/mybatis/"/>
    <url>/2023/05/27/mybatis/</url>
    
    <content type="html"><![CDATA[<h3 id="用来循环容器的标签forEach-查看例子"><a href="#用来循环容器的标签forEach-查看例子" class="headerlink" title="用来循环容器的标签forEach,查看例子"></a><strong>用来循环容器的标签forEach,查看例子</strong></h3><p>foreach元素的属性主要有item，index，collection，open，separator，close。</p><ul><li>item：集合中元素迭代时的别名，</li><li>index：集合中元素迭代时的索引</li><li>open：常用语where语句中，表示以什么开始，比如以’(‘开始</li><li>separator：表示在每次进行迭代时的分隔符，</li><li>close 常用语where语句中，表示以什么结束，</li></ul><p>在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有一下3种情况：</p><ul><li>如果传入的是单参数且参数类型是一个List的时候，collection属性值为list .</li><li>如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array .</li><li>如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key.</li></ul><p>针对最后一条，我们来看一下官方说法：</p><blockquote><p>注意 你可以将一个 List 实例或者数组作为参数对象传给 MyBatis，当你这么做的时候，MyBatis 会自动将它包装在一个 Map 中并以名称为键。List 实例将会以“list”作为键，而数组实例的键将是“array”。</p></blockquote><p>所以，不管是多参数还是单参数的list,array类型，都可以封装为map进行传递。如果传递的是一个List，则mybatis会封装为一个list为key，list值为object的map，如果是array，则封装成一个array为key，array的值为object的map，如果自己封装呢，则colloection里放的是自己封装的map里的key值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">//mapper中我们要为这个方法传递的是一个容器,将容器中的元素一个一个的//拼接到xml的方法中就要使用这个forEach这个标签了public List<span class="hljs-tag">&lt;<span class="hljs-name">Entity</span>&gt;</span> queryById(List<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> userids);<br>    //对应的xml中如下<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseReslutMap&quot;</span> &gt;</span><br>    select * FROM entity<br>    where id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;userids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;userid&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;userid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="concat模糊查询"><a href="#concat模糊查询" class="headerlink" title="concat模糊查询"></a><strong>concat模糊查询</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">//比如说我们想要进行条件查询,但是几个条件不是每次都要使用,那么我们就可以//通过判断是否拼接到sql中       <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BascResultMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;entity&quot;</span>&gt;</span><br>    SELECT * from entity<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name!=null&quot;</span>&gt;</span><br>                name like concat(&#x27;%&#x27;,concat(#&#123;name&#125;,&#x27;%&#x27;))<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="choose-when-otherwise-标签"><a href="#choose-when-otherwise-标签" class="headerlink" title="choose (when, otherwise)标签"></a><strong>choose (when, otherwise)标签</strong></h3><p>choose标签是按顺序判断其内部when标签中的test条件出否成立，如果有一个成立，则 choose 结束。当 choose 中所有 when 的条件都不满则时，则执行 otherwise 中的sql。类似于Java 的 switch 语句，choose 为 switch，when 为 case，otherwise 则为 default。</p><p>例如下面例子，同样把所有可以限制的条件都写上，方面使用。choose会从上到下选择一个when标签的test为true的sql执行。安全考虑，我们使用where将choose包起来，放置关键字多于错误。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  choose(判断参数) - 按顺序将实体类 User 第一个不为空的属性作为：where条件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultMap_user&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.yiibai.pojo.User&quot;</span>&gt;</span><br>      SELECT *<br>        FROM User u<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username !=null &quot;</span>&gt;</span><br>                    u.username LIKE CONCAT(CONCAT(&#x27;%&#x27;, #&#123;username, jdbcType=VARCHAR&#125;),&#x27;%&#x27;)<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != null and sex != &#x27;&#x27; &quot;</span>&gt;</span><br>                    AND u.sex = #&#123;sex, jdbcType=INTEGER&#125;<br>                &lt;/when &gt;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null &quot;</span>&gt;</span><br>                    AND u.age = #&#123;age, jdbcType=INTEGER&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span>          <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span>          <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span>      <br>         <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="selectKey-标签"><a href="#selectKey-标签" class="headerlink" title="selectKey 标签"></a><strong>selectKey 标签</strong></h3><p>在insert语句中，在Oracle经常使用序列、在MySQL中使用函数来自动生成插入表的主键，而且需要方法能返回这个生成主键。使用myBatis的selectKey标签可以实现这个效果。</p><p>下面例子，使用mysql数据库自定义函数nextval(‘student’)，用来生成一个key，并把他设置到传入的实体类中的studentId属性上。所以在执行完此方法后，边可以通过这个实体类获取生成的key。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 插入学生 自动主键--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;createStudentAutoKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;liming.student.manager.data.model.StudentEntity&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;studentId&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;studentId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;BEFORE&quot;</span>&gt;</span><br>        select nextval(&#x27;student&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span>&gt;</span><br>    INSERT INTO<br>M_STUDENT(STUDENT_ID,STUDENT_SEX,STUDENT_BIRTHDAY,STUDENT_PHOTO,CLASS_ID,PLACE_ID)   VALUES (#&#123;studentId&#125;,#&#123;studentName&#125;,#&#123;studentSex&#125;,#&#123;studentBirthday&#125;,#&#123;studentPhoto,javaType=byte[],jdbcType=BLOB,typeHandler=org.apache.ibatis.type.BlobTypeHandler&#125;,#&#123;classId&#125;,#&#123;placeId&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>调用接口方法，和获取自动生成key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StudentEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentEntity</span>();<br>entity.setStudentName(<span class="hljs-string">&quot;黎明你好&quot;</span>);<br>entity.setStudentSex(<span class="hljs-number">1</span>);<br>entity.setStudentBirthday(DateUtil.parse(<span class="hljs-string">&quot;1985-05-28&quot;</span>));<br>entity.setClassId(<span class="hljs-string">&quot;20000001&quot;</span>);<br>entity.setPlaceId(<span class="hljs-string">&quot;70000001&quot;</span>);<br><span class="hljs-built_in">this</span>.dynamicSqlMapper.createStudentAutoKey(entity);<br>System.out.println(<span class="hljs-string">&quot;新增学生ID: &quot;</span> + entity.getStudentId());<br></code></pre></td></tr></table></figure><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a><strong>if标签</strong></h3><p>if标签可用在许多类型的sql语句中，我们以查询为例。首先看一个很普通的查询：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 查询学生list，like姓名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentListLikeName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;StudentEntity&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentResultMap&quot;</span>&gt;</span><br>    SELECT * from M_STUDENT ms<br>    WHERE ms.STUDENT_NAME LIKE CONCAT(CONCAT(&#x27;%&#x27;, #&#123;studentName&#125;),&#x27;%&#x27;) <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>但是此时如果studentName为null，此语句很可能报错或查询结果为空。此时我们使用if动态sql语句先进行判断，如果值为null或等于空字符串，我们就不进行此条件的判断，增加灵活性。</p><p>参数为实体类StudentEntity。将实体类中所有的属性均进行判断，如果不为空则执行判断条件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 2 if(判断参数) - 将实体类不为空的属性作为where条件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultMap_studentEntity&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;liming.student.manager.data.model.StudentEntity&quot;</span>&gt;</span><br>    SELECT ms.STUDENT_ID, ms.STUDENT_NAME, ms.STUDENT_SEX, ms.STUDENT_BIRTHDAY,      ms.STUDENT_PHOTO,ms.CLASS_ID,ms.PLACE_ID <br>    FROM M_STUDENT ms<br>    WHERE<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentName !=null &quot;</span>&gt;</span><br>        ms.STUDENT_NAME LIKE CONCAT(CONCAT(&#x27;%&#x27;, #&#123;studentName, jdbcType=VARCHAR&#125;),&#x27;%&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentSex != null and studentSex != &#x27;&#x27; &quot;</span>&gt;</span><br>        AND ms.STUDENT_SEX = #&#123;studentSex, jdbcType=INTEGER&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentBirthday != null &quot;</span>&gt;</span><br>        AND ms.STUDENT_BIRTHDAY = #&#123;studentBirthday, jdbcType=DATE&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;classId != null and classId!= &#x27;&#x27; &quot;</span>&gt;</span><br>        AND ms.CLASS_ID = #&#123;classId, jdbcType=VARCHAR&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;classEntity != null and classEntity.classId !=null and classEntity.classId !=&#x27; &#x27; &quot;</span>&gt;</span><br>        AND ms.CLASS_ID = #&#123;classEntity.classId, jdbcType=VARCHAR&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;placeId != null and placeId != &#x27;&#x27; &quot;</span>&gt;</span><br>        AND ms.PLACE_ID = #&#123;placeId, jdbcType=VARCHAR&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;placeEntity != null and placeEntity.placeId != null and placeEntity.placeId != &#x27;&#x27; &quot;</span>&gt;</span><br>        AND ms.PLACE_ID = #&#123;placeEntity.placeId, jdbcType=VARCHAR&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentId != null and studentId != &#x27;&#x27; &quot;</span>&gt;</span>      <br>        AND ms.STUDENT_ID = #&#123;studentId, jdbcType=VARCHAR&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用时比较灵活， new一个这样的实体类，我们需要限制那个条件，只需要附上相应的值就会where这个条件，相反不去赋值就可以不在where中判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StudentEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentEntity</span>();<br>    entity.setStudentName(<span class="hljs-string">&quot;&quot;</span>);<br>    entity.setStudentSex(<span class="hljs-number">1</span>);<br>    entity.setStudentBirthday(DateUtil.parse(<span class="hljs-string">&quot;2023-05-28&quot;</span>));                 <br>    entity.setClassId(<span class="hljs-string">&quot;20000001&quot;</span>);<br> entity.setPlaceId(<span class="hljs-string">&quot;70000001&quot;</span>);<br> List&lt;StudentEntity&gt; list = <span class="hljs-built_in">this</span>.dynamicSqlMapper.getStudentList(entity);<br>    <span class="hljs-keyword">for</span> (StudentEntity e : list) &#123;<br>     System.out.println(e.toString());<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="if-where-的条件判断"><a href="#if-where-的条件判断" class="headerlink" title="if + where 的条件判断"></a><strong>if + where 的条件判断</strong></h3><p>当where中的条件使用的if标签较多时，这样的组合可能会导致错误。我们以在3.1中的查询语句为例子，当java代码按如下方法调用时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">StudentEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentEntity</span>();<br>    entity.setStudentName(<span class="hljs-literal">null</span>);<br>    entity.setStudentSex(<span class="hljs-number">1</span>);<br>    List&lt;StudentEntity&gt; list = <span class="hljs-built_in">this</span>.dynamicSqlMapper.getStudentList(entity);<br>    <span class="hljs-keyword">for</span> (StudentEntity e : list) &#123;<br>        System.out.println(e.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果上面例子，参数studentName为null，将不会进行STUDENT_NAME列的判断，则会直接导“WHERE AND”关键字多余的错误SQL。</p><p>这时我们可以使用where动态语句来解决。这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。</p><p>上面例子修改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 3 select - where/if(判断参数) - 将实体类不为空的属性作为where条件 --&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultMap_studentEntity&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;wtl.student.manager.data.model.StudentEntity&quot;</span>&gt;</span><br>    SELECT ms.STUDENT_ID,ms.STUDENT_NAME,ms.STUDENT_SEX,ms.STUDENT_BIRTHDAY,    ms.STUDENT_PHOTO,ms.CLASS_ID,ms.PLACE_ID<br>    FROM M_STUDENT ms<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentName !=null &quot;</span>&gt;</span><br>            ms.STUDENT_NAME LIKE CONCAT(CONCAT(&#x27;%&#x27;, #&#123;studentName, jdbcType=VARCHAR&#125;),&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentSex != null and studentSex != &#x27;&#x27; &quot;</span>&gt;</span><br>            AND ms.STUDENT_SEX = #&#123;studentSex, jdbcType=INTEGER&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentBirthday != null &quot;</span>&gt;</span><br>            AND ms.STUDENT_BIRTHDAY = #&#123;studentBirthday, jdbcType=DATE&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;classId != null and classId!= &#x27;&#x27; &quot;</span>&gt;</span><br>            AND ms.CLASS_ID = #&#123;classId, jdbcType=VARCHAR&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;classEntity != null and classEntity.classId !=null and classEntity.classId !=&#x27; &#x27; &quot;</span>&gt;</span><br>            AND ms.CLASS_ID = #&#123;classEntity.classId, jdbcType=VARCHAR&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;placeId != null and placeId != &#x27;&#x27; &quot;</span>&gt;</span><br>            AND ms.PLACE_ID = #&#123;placeId, jdbcType=VARCHAR&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;placeEntity != null and placeEntity.placeId != null and placeEntity.placeId != &#x27;&#x27; &quot;</span>&gt;</span><br>            AND ms.PLACE_ID = #&#123;placeEntity.placeId, jdbcType=VARCHAR&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentId != null and studentId != &#x27;&#x27; &quot;</span>&gt;</span><br>            AND ms.STUDENT_ID = #&#123;studentId, jdbcType=VARCHAR&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="if-set实现修改语句"><a href="#if-set实现修改语句" class="headerlink" title="if + set实现修改语句"></a><strong>if + set实现修改语句</strong></h3><p>当update语句中没有使用if标签时，如果有一个参数为null，都会导致错误。</p><p>当在update语句中使用if标签时，如果前面的if没有执行，则或导致逗号多余错误。使用set标签可以将动态的配置SET 关键字，和剔除追加到条件末尾的任何不相关的逗号。使用if+set标签修改后，如果某项为null则不进行更新，而是保持数据库原值。</p><p>如下示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 4 if/set(判断参数) - 将实体类不为空的属性更新 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateStudent&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;wtl.student.manager.data.model.StudentEntity&quot;</span>&gt;</span><br>    UPDATE M_STUDENT ms<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentName != null and studentName != &#x27;&#x27; &quot;</span>&gt;</span><br>            ms.STUDENT_NAME = #&#123;studentName&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentSex != null and studentSex != &#x27;&#x27; &quot;</span>&gt;</span><br>            ms.STUDENT_SEX = #&#123;studentSex&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentBirthday != null &quot;</span>&gt;</span><br>            ms.STUDENT_BIRTHDAY = #&#123;studentBirthday&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentPhoto != null &quot;</span>&gt;</span><br>            ms.STUDENT_PHOTO = #&#123;studentPhoto, javaType=byte[], jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;classId != &#x27;&#x27; &quot;</span>&gt;</span><br>            ms.CLASS_ID = #&#123;classId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;placeId != &#x27;&#x27; &quot;</span>&gt;</span><br>            ms.PLACE_ID = #&#123;placeId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    WHERE ms.STUDENT_ID = #&#123;studentId&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="if-trim代替where-set标签"><a href="#if-trim代替where-set标签" class="headerlink" title="if + trim代替where/set标签"></a><strong>if + trim代替where/set标签</strong></h3><p>trim是更灵活的去处多余关键字的标签，他可以实践where和set的效果。</p><p><strong>trim代替where</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 5.1 if/trim代替where(判断参数) -将实体类不为空的属性作为where条件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultMap_studentEntity&quot;</span>&gt;</span><br>    SELECT ms.STUDENT_ID,ms.STUDENT_NAME,ms.STUDENT_SEX,ms.STUDENT_BIRTHDAY,       ms.STUDENT_PHOTO,ms.CLASS_ID,ms.PLACE_ID<br>    FROM M_STUDENT ms<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;WHERE&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;AND|OR&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentName !=null &quot;</span>&gt;</span><br>            ms.STUDENT_NAME LIKE CONCAT(CONCAT(&#x27;%&#x27;, #&#123;studentName, jdbcType=VARCHAR&#125;),&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentSex != null and studentSex != &#x27;&#x27; &quot;</span>&gt;</span><br>            AND ms.STUDENT_SEX = #&#123;studentSex, jdbcType=INTEGER&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentBirthday != null &quot;</span>&gt;</span><br>            AND ms.STUDENT_BIRTHDAY = #&#123;studentBirthday, jdbcType=DATE&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;classId != null and classId!= &#x27;&#x27; &quot;</span>&gt;</span><br>            AND ms.CLASS_ID = #&#123;classId, jdbcType=VARCHAR&#125;  <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;classEntity != null and classEntity.classId !=null and classEntity.classId !=&#x27; &#x27; &quot;</span>&gt;</span><br>            AND ms.CLASS_ID = #&#123;classEntity.classId, jdbcType=VARCHAR&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;placeId != null and placeId != &#x27;&#x27; &quot;</span>&gt;</span><br>            AND ms.PLACE_ID = #&#123;placeId, jdbcType=VARCHAR&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;placeEntity != null and placeEntity.placeId != null and placeEntity.placeId != &#x27;&#x27; &quot;</span>&gt;</span><br>            AND ms.PLACE_ID = #&#123;placeEntity.placeId, jdbcType=VARCHAR&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentId != null and studentId != &#x27;&#x27; &quot;</span>&gt;</span><br>            AND ms.STUDENT_ID = #&#123;studentId, jdbcType=VARCHAR&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>trim代替set</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 5.2 if/trim代替set(判断参数) - 将实体类不为空的属性更新 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateStudent&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;wtl.student.manager.data.model.StudentEntity&quot;</span>&gt;</span><br>    UPDATE M_STUDENT ms<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentName != null and studentName != &#x27;&#x27; &quot;</span>&gt;</span><br>            ms.STUDENT_NAME = #&#123;studentName&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentSex != null and studentSex != &#x27;&#x27; &quot;</span>&gt;</span><br>            ms.STUDENT_SEX = #&#123;studentSex&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentBirthday != null &quot;</span>&gt;</span><br>        ms.STUDENT_BIRTHDAY = #&#123;studentBirthday&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;studentPhoto != null &quot;</span>&gt;</span><br>            ms.STUDENT_PHOTO = #&#123;studentPhoto, javaType=byte[], jdbcType=BLOB, typeHandler=org.apache.ibatis.type.BlobTypeHandler&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;classId != &#x27;&#x27; &quot;</span>&gt;</span><br>            ms.CLASS_ID = #&#123;classId&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;placeId != &#x27;&#x27; &quot;</span>&gt;</span><br>            ms.PLACE_ID = #&#123;placeId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>    WHERE ms.STUDENT_ID = #&#123;studentId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a><strong>foreach</strong></h3><p>对于动态SQL 非常必须的，主是要迭代一个集合，通常是用于IN 条件。List 实例将使用“list”做为键，数组实例以“array” 做为键。</p><p>foreach元素是非常强大的，它允许你指定一个集合，声明集合项和索引变量，它们可以用在元素体内。它也允许你指定开放和关闭的字符串，在迭代之间放置分隔符。这个元素是很智能的，它不会偶然地附加多余的分隔符。</p><blockquote><p>注意：你可以传递一个List实例或者数组作为参数对象传给MyBatis。当你这么做的时候，MyBatis会自动将它包装在一个Map中，用名称在作为键。List实例将会以“list”作为键，而数组实例将会以“array”作为键。</p></blockquote><p>这个部分是对关于XML配置文件和XML映射文件的而讨论的。下一部分将详细讨论Java API，所以你可以得到你已经创建的最有效的映射。</p><p><strong>1.参数为array示例的写法</strong></p><p>接口的方法声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;StudentEntity&gt; <span class="hljs-title function_">getStudentListByClassIds_foreach_array</span><span class="hljs-params">(String[] classIds)</span>;<br></code></pre></td></tr></table></figure><p>动态SQL语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 7.1 foreach(循环array参数) - 作为where中in的条件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentListByClassIds&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultMap_studentEntity&quot;</span>&gt;</span><br>    SELECT ms.STUDENT_ID,ms.STUDENT_NAME,ms.STUDENT_SEX,ms.STUDENT_BIRTHDAY,     ms.STUDENT_PHOTO,ms.CLASS_ID,ms.PLACE_ID<br>    FROM M_STUDENT ms<br>    WHERE ms.CLASS_ID IN<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;array&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;classIds&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;classIds&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试代码，查询学生中，在20000001、20000002这两个班级的学生：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectList</span><span class="hljs-params">()</span> &#123;<br>    String[] classIds = &#123; <span class="hljs-string">&quot;20000001&quot;</span>, <span class="hljs-string">&quot;20000002&quot;</span> &#125;;<br>    List&lt;StudentEntity&gt; list = <span class="hljs-built_in">this</span>.dynamicSqlMapper.getStudentListByClassIds(classIds);<br>    <span class="hljs-keyword">for</span> (StudentEntity e : list) &#123;<br>        System.out.println(e.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.参数为list示例的写法</strong></p><p>接口的方法声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;StudentEntity&gt; <span class="hljs-title function_">getStudentListByClassIds</span><span class="hljs-params">(List&lt;String&gt; classIdList)</span>;<br></code></pre></td></tr></table></figure><p>动态SQL语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 7.2 foreach(循环List&lt;String&gt;参数) - 作为where中in的条件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentListByClassIds&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultMap_studentEntity&quot;</span>&gt;</span><br>    SELECT ms.STUDENT_ID,ms.STUDENT_NAME,ms.STUDENT_SEX,ms.STUDENT_BIRTHDAY,     ms.STUDENT_PHOTO,ms.CLASS_ID,ms.PLACE_ID<br>    FROM M_STUDENT ms<br>    WHERE ms.CLASS_ID IN<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;classIdList&quot;</span>  <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span>          #&#123;classIdList&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试代码，查询学生中，在20000001、20000002这两个班级的学生：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectList</span><span class="hljs-params">()</span> &#123;<br>    ArrayList&lt;String&gt; classIdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    classIdList.add(<span class="hljs-string">&quot;20000001&quot;</span>);<br>    classIdList.add(<span class="hljs-string">&quot;20000002&quot;</span>);<br>    List&lt;StudentEntity&gt; list = <span class="hljs-built_in">this</span>.dynamicSqlMapper.getStudentListByClassIds(classIdList);<br>    <span class="hljs-keyword">for</span> (StudentEntity e : list) &#123;<br>        System.out.println(e.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>sql片段标签<code>&lt;sql&gt;</code>：通过该标签可定义能复用的sql语句片段，在执行sql语句标签中直接引用即可。这样既可以提高编码效率，还能有效简化代码，提高可读性</p><p>需要配置的属性：id=”” &gt;&gt;&gt;表示需要改sql语句片段的唯一标识</p><p>引用：通过<code>&lt;include refid=&quot;&quot; /&gt;</code>标签引用，refid=”” 中的值指向需要引用的<code>&lt;sql&gt;</code>中的id=“”属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--定义sql片段--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderAndItem&quot;</span>&gt;</span>   t1.order_id,t1.cid,t1.address,t1.create_date,t1.item,t2.item,t2.product_id,t2.count<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findOrderAndItemsByOid&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>    select  <span class="hljs-comment">&lt;!--引用sql片段--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;orderAndItem&quot;</span> /&gt;</span><br>    from table1 t1<br>    join table2 t2 on t1.item = t2.item<br>    where t1.order_id = #&#123;orderId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>&lt;MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口优化</title>
    <link href="/2023/05/20/%E6%8E%A5%E5%8F%A3%E4%BC%98%E5%8C%96/"/>
    <url>/2023/05/20/%E6%8E%A5%E5%8F%A3%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="接口优化方案总结"><a href="#接口优化方案总结" class="headerlink" title="接口优化方案总结"></a><strong>接口优化方案总结</strong></h2><p>近期接口优化的一些总结：</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="1-批处理"><a href="#1-批处理" class="headerlink" title="1.批处理"></a><strong>1.批处理</strong></h3><p>批量思想：批量操作数据库，这个很好理解，我们在循环插入场景的接口中，可以在批处理执行完成后一次性插入或更新数据库，避免多次 IO。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//for循环单笔入库</span><br>list.stream().forEatch(l -&gt; &#123;<br>insert();<br>&#125;);<br><span class="hljs-comment">//批量入库batchInsert();</span><br></code></pre></td></tr></table></figure><h3 id="2-异步处理"><a href="#2-异步处理" class="headerlink" title="2. 异步处理"></a><strong>2. 异步处理</strong></h3><p>异步思想：针对耗时比较长且不是结果必须的逻辑，我们可以考虑放到异步执行，这样能降低接口耗时。</p><h3 id="3-空间换时间"><a href="#3-空间换时间" class="headerlink" title="3. 空间换时间"></a><strong>3. 空间换时间</strong></h3><p>合理使用缓存，针对一些频繁使用且不频繁变更的数据，可以提前缓存起来，需要时直接查缓存，避免频繁地查询数据库或者重复计算。需要注意空间换时间也是一把双刃剑，需要综合考虑使用场景，缓存带来的数据一致性问题也挺令人头疼。</p><h3 id="4-预处理"><a href="#4-预处理" class="headerlink" title="4. 预处理"></a><strong>4. 预处理</strong></h3><p>预取思想，提前把查询的数据计算好，封装好，放入缓存或者表中的某个字段，用的时候会大幅提高接口性能。</p><h3 id="5-池化思想"><a href="#5-池化思想" class="headerlink" title="5. 池化思想"></a><strong>5. 池化思想</strong></h3><p>我们都用过数据库连接池，线程池等，这就是池思想的体现，它们解决的问题就是避免重复创建对象或创建连接，可以重复利用，避免不必要的损耗，因为创建销毁也会占用时间。</p><p>池化思想包含但并不局限于以上两种，总的来说池化思想的本质是<strong>预分配与循环使用</strong>。</p><h3 id="6-串行改并行"><a href="#6-串行改并行" class="headerlink" title="6. 串行改并行"></a><strong>6. 串行改并行</strong></h3><p>串行就是，当前执行逻辑必须等上一个执行逻辑结束之后才执行，并行就是两个执行逻辑互不干扰，所以并行相对来说就比较节省时间，当然是建立在没有结果参数依赖的前提下。</p><h3 id="7-索引"><a href="#7-索引" class="headerlink" title="7. 索引"></a><strong>7. 索引</strong></h3><p>加索引能大大提高数据查询效率，这个在接口设计之出也会考虑到</p><p>索引失效常见情景：</p><p>① 隐式类型转换；</p><p>② select * ；</p><p>③ 对索引进行列运算(+、-、*、/)；</p><p>④ 不满足最左匹配原则；</p><p>⑤ 使用or关键字；</p><p>⑥ not in 和 not exists；</p><p>⑦ order by 和搜索列不匹配；</p><p>⑧ 使用&lt;、&gt;、!=;</p><p>⑨ like以通配符开头(‘%xxx’)</p><h3 id="8-避免大事务"><a href="#8-避免大事务" class="headerlink" title="8. 避免大事务"></a><strong>8. 避免大事务</strong></h3><p>所谓大事务问题，就是<strong>运行时间较长的事务，</strong>由于事务一致不提交，会导致数据库连接被占用，影响到别的请求访问数据库，影响别的接口性能。事务中嵌套 RPC 调用，即非 DB 操作，这些非 DB 操作如果耗时较大的话，可能会出现大事务问题。大数据引发的问题主要有：死锁、接口超时、主从延迟等。所以为避免大事务问题，我们可以通过以下方案规避：</p><p>① RPC调用不放到事务里面;</p><p>② 查询操作尽量放到事务之外;</p><p>③ 事务中避免处理太多数据。</p><h3 id="9-优化程序结构"><a href="#9-优化程序结构" class="headerlink" title="9. 优化程序结构"></a><strong>9. 优化程序结构</strong></h3><p>程序结构问题一般出现在多次需求迭代后，代码叠加形成。会造成一些重复查询、多次创建对象等耗时问题。在多人维护一个项目时比较多见。解决起来也比较简单，我们需要针对接口整体做重构，评估每个代码块的作用和用途，调整执行顺序。</p><h3 id="10-深分页问题"><a href="#10-深分页问题" class="headerlink" title="10. 深分页问题"></a><strong>10. 深分页问题</strong></h3><p>深分页问题比较常见，分页我们一般最先想到的就是 limit，为什么会慢，如下SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> m_product <span class="hljs-keyword">where</span> product_code <span class="hljs-operator">=</span><span class="hljs-string">&#x27;WA123456&#x27;</span><br><span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> orderTime <span class="hljs-keyword">desc</span> limit <span class="hljs-number">100000</span>,<span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p>limit 100000,200 意味着会扫描 100200 行，然后返回 200 行，丢弃掉前 100000 行。所以执行速度很慢。一般可以采用标签记录法来优化，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> m_product <span class="hljs-keyword">where</span> product_code <span class="hljs-operator">=</span><span class="hljs-string">&#x27;WA123456&#x27;</span><br><span class="hljs-keyword">and</span> status <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <br><span class="hljs-keyword">and</span> id <span class="hljs-operator">&gt;</span> <span class="hljs-number">100000</span> limit <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p>这样优化的好处是命中了主键索引，无论多少页，性能都还不错，但是局限性是需要一个连续自增的字段。</p><p>避免使用select *，其实select后字段名全写，也比 * 效率高很多。</p><h3 id="11-SQL-优化"><a href="#11-SQL-优化" class="headerlink" title="11.SQL 优化"></a><strong>11.SQL 优化</strong></h3><p>sql优化能大幅提高接口的查询性能，结合索引、分页等关注点制定优化方案。</p><h3 id="12-锁粒度避免过粗"><a href="#12-锁粒度避免过粗" class="headerlink" title="12. 锁粒度避免过粗"></a><strong>12. 锁粒度避免过粗</strong></h3><p>锁一般是为了在高并发场景下保护共享资源采用的一种手段，但是如果锁的粒度太粗，会很影响接口性能。</p><p>关于锁粒度：就是要锁的范围有多大，不管是 synchronized 还是 redis 分布式锁，只需要在临界资源处加锁即可，不涉及共享资源的，不必要加锁，就好比你要上卫生间，只需要把卫生间的门锁上就可以，不需要把客厅的门也锁上。</p><p>错误的加锁方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//非共享资源</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notShare</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">//共享资源</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">share</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">intwrong</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>)&#123;<br>    share();<br>        notShare();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正确的加锁方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//非共享资源</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notShare</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">//共享资源</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">share</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">intright</span><span class="hljs-params">()</span>&#123;    <br>notShare();<br><span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>)&#123;<br>share(); <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>&lt;接口调优</category>
      
    </categories>
    
    
    <tags>
      
      <tag>接口优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储过程</title>
    <link href="/2023/04/03/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <url>/2023/04/03/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>存储过程介绍<br>    Oracle:<br>        1.带参存储过程语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> 存储过程名字(<br>    <span class="hljs-comment">--输入参数 IN NUMBER,</span><br>    <span class="hljs-comment">--输出参数 OUT NUMBER, --可以有多个输入参数和输出参数</span><br>                <span class="hljs-comment">--输入输出 INOUT NUMBER</span><br>) <span class="hljs-keyword">IS</span><br>    <span class="hljs-comment">--这个区间可以用来定义变量和创建游标</span><br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-comment">--执行游标或者执行语句</span><br>     <span class="hljs-keyword">commit</span>; <span class="hljs-comment">--对上面的内容进行提交</span><br>exception<span class="hljs-operator">/</span><span class="hljs-operator">/</span>存储过程异常<br>   <span class="hljs-keyword">when</span> others <span class="hljs-keyword">then</span><br>      <span class="hljs-comment">--异常处理方法，可以是打印错误，然后进行回滚等操作，下面操作一样，看自己情况决定</span><br>      <span class="hljs-keyword">rollback</span>;<br>      dbms_output.put_line(sqlcode);<br>      dbms_output.put_line(substr(sqlerrm, <span class="hljs-number">1</span>, <span class="hljs-number">512</span>));<br><span class="hljs-keyword">END</span> 存储过程名字;<br><span class="hljs-comment">--调用存储过程</span><br>存储过程名称;<br></code></pre></td></tr></table></figure><p>​        注意：<br>​            其中参数IN表示输入参数，是参数的默认模式。<br>​            OUT表示返回值参数，类型可以使用任意Oracle中的合法类型。<br>​            OUT模式定义的参数只能在过程体内部赋值，表示该参数可以将某个值传递回调用他的过程<br>​            IN OUT表示该参数可以向该过程中传递值，也可以将某个值传出去。<br>​    2.无参存储过程语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> 存储过程名字<br><span class="hljs-keyword">IS</span><br>    <span class="hljs-comment">--这个区间可以用来定义变量和创建游标</span><br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-comment">--执行游标或者执行语句</span><br>    <span class="hljs-keyword">commit</span>; <span class="hljs-comment">--对上面的内容进行提交</span><br>exception<span class="hljs-operator">/</span><span class="hljs-operator">/</span>存储过程异常<br>   <span class="hljs-keyword">when</span> others <span class="hljs-keyword">then</span><br>      <span class="hljs-comment">--异常处理方法，可以是打印错误，然后进行回滚等操作，下面操作一样，看自己情况决定</span><br>   <span class="hljs-keyword">rollback</span>;<br>   dbms_output.put_line(sqlcode);<br>   dbms_output.put_line(substr(sqlerrm, <span class="hljs-number">1</span>, <span class="hljs-number">512</span>));<br><span class="hljs-keyword">END</span> 存储过程名字;<br><span class="hljs-comment">--调用存储过程</span><br>存储过程名称;<br></code></pre></td></tr></table></figure><p>​    MySQL:</p><p>​        1.带参存储过程语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">delimiter 自定义结束符号<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> 存储过程名字([<span class="hljs-keyword">in</span>,<span class="hljs-keyword">out</span>,<span class="hljs-keyword">inout</span>] 参数名 数据类型)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-comment">--定义变量/游标</span><br>    <span class="hljs-comment">--执行游标或者执行语句</span><br><span class="hljs-keyword">END</span> 自定义结束符号<br>delimiter;<br><span class="hljs-comment">--调用存储过程</span><br><span class="hljs-keyword">call</span> 存储过程名称；<br></code></pre></td></tr></table></figure><p>​        2.无参存储过程语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">delimiter 自定义结束符号<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> 存储过程名字()<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-comment">--定义变量/游标</span><br>    <span class="hljs-comment">--执行游标或者执行语句</span><br><span class="hljs-keyword">END</span> 自定义结束符号<br>delimiter;<br><span class="hljs-comment">--调用存储过程</span><br><span class="hljs-keyword">call</span> 存储过程名称；<br></code></pre></td></tr></table></figure><p>​    流程控制-判断语句</p><p>​        1.if语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">if 条件语句<span class="hljs-number">1</span> <span class="hljs-keyword">then</span> 执行语句<span class="hljs-number">1</span>;<br>elseif 条件语句<span class="hljs-number">1</span> <span class="hljs-keyword">then</span> 执行语句<span class="hljs-number">2</span>;<br><span class="hljs-keyword">end</span> if;<br></code></pre></td></tr></table></figure><p>​        2.case语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">case</span> 参数<br><span class="hljs-keyword">when</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">then</span> 执行语句<span class="hljs-number">1</span>;<br><span class="hljs-keyword">when</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">then</span> 执行语句<span class="hljs-number">2</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">case</span>;<br></code></pre></td></tr></table></figure><p>​    流程控制-循环语句</p><p>​        1.while语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">标签：<br>while 循环条件<br>do 循环体;<br><span class="hljs-keyword">end</span> while 标签;<br></code></pre></td></tr></table></figure><p>​        2.repeat语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">标签：<br>repeat 循环体;<br>until 条件表达式<br><span class="hljs-keyword">end</span> repeat 标签;<br></code></pre></td></tr></table></figure><p>​        3.loop语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">标签:<br>loop 循环体;<br>if 条件表达式 <span class="hljs-keyword">then</span><br>leave 标签;<br><span class="hljs-keyword">end</span> if;<br><span class="hljs-keyword">end</span> loop;<br>loop<br>    执行语句;<br>    exit <span class="hljs-keyword">when</span> <span class="hljs-operator">&lt;</span>条件语句<span class="hljs-operator">&gt;</span> <span class="hljs-comment">--条件满足，退出循环语句;</span><br><span class="hljs-keyword">end</span> loop;<br></code></pre></td></tr></table></figure><p>​        4.for语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">for</span> 循环计数器 <span class="hljs-keyword">in</span> [REVERSE] 下限 .. 上限 loop<br>要执行的语句;<br><span class="hljs-keyword">end</span> loop [循环标签];<br>每循环一次，循环变量自动加<span class="hljs-number">1</span>；使用关键字REVERSE，循环变量自动减<span class="hljs-number">1</span>。<br><span class="hljs-keyword">in</span> REVERSE 后面的数字必须是从小到大的顺序，而且必须是整数，不能是变量或表达式,也可以使用EXIT退出循环，见loop语句。<br></code></pre></td></tr></table></figure><p>​    游标</p><p>​        声明语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">MySQL:<br><span class="hljs-keyword">declare</span> 游标名称 <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span> 传给游标的结果集;<br><span class="hljs-keyword">open</span> 游标名称;<br><span class="hljs-keyword">fetch</span> 游标名称 <span class="hljs-keyword">into</span> 自定义变量;<br><span class="hljs-keyword">close</span> 游标名称;<br>Oracle:<br><span class="hljs-keyword">cursor</span> 游标名称 <span class="hljs-keyword">is</span> 传给游标的结果集;<br><span class="hljs-keyword">open</span> 游标名称;<br><span class="hljs-keyword">fetch</span> 游标名称 <span class="hljs-keyword">into</span> 自定义变量;<br><span class="hljs-keyword">close</span> 游标名称;<br></code></pre></td></tr></table></figure><p>​    区别</p><table><thead><tr><th align="left">类别描述</th><th align="left">MySQL</th><th align="left">Oracle</th><th align="left">注解</th></tr></thead><tbody><tr><td align="left">创建存储过程/函数语句</td><td align="left">DROP PROCEDURE IF EXISTS <code>存储过程名称</code>;<br/>create procedure 存储过程名称()<br/>DROP FUNCTION IF EXISTS <code>函数名称</code>;<br/>CREATE  FUNCTION <code>函数名称</code>()<br/> RETURNS varchar(1000)</td><td align="left">create or replace procedure 存储过程名称（） is<br/>create or replace function 函数名称()<br/>RETURN VARCHAR2</td><td align="left">1.在创建存储过程时如果存在同名的存储过程,会删除老的存储过程. <br/>  Oracle使用create or replace.<br/>  MySQL使用先删除老的存储过程,然后再创建新的存储过程.<br/>2. Oracle存储过程可以定义在package中,也可以定义在Procedures中. 如果定义在包中,一个包中可以包含多个存储过程和方法.如果定义在Procedures中,存储过程中不可以定义多个存储过程. <br/>   MySQL存储过程中不可以定义多个存储过程.</td></tr><tr><td align="left">传参</td><td align="left">存储过程名称(参数类型  参数  参数属性)</td><td align="left">存储过程名称(参数  参数类型  参数属性)</td><td align="left">1. oracle存储过程参数可以定义为表的字段类型.<br/>   Mysql存储过程不支持这种定义方法.需要定义变量的实际类型和长度.<br/>2. oracle 参数类型in/out/inout写在参数名后面. <br/>   Mysql  参数类型in/out/inout写在参数名前面.<br/>3. oracle 参数类型in/out/inout 都必须写.<br/>   Mysql  参数类型默认in,可省略，out或inout不可省略.</td></tr><tr><td align="left">包</td><td align="left">多个存储过程或函数</td><td align="left">create or replace package/package body package name</td><td align="left">oracle可以创建包,包中可以包含多个存储过程和方法. <br/>mysql没有包，需分别创建存储过程和方法. 每个存储过程或方法都需要放在一个文件中.</td></tr><tr><td align="left">存储过程返回语句</td><td align="left">LEAVE  xx;</td><td align="left">return;</td><td align="left">oracle存储过程和方法都可以使用return退出当前过程和方法. <br/>Mysql存储过程中只能使用leave退出当前存储过程.不可以使用return. <br/>Mysql方法可以使用return退出当前方法.</td></tr><tr><td align="left">声明变量的位置</td><td align="left">begin…end内</td><td align="left">begin之前</td><td align="left"></td></tr><tr><td align="left">调用方式</td><td align="left">call 存储过程名称();</td><td align="left">存储过程名称();</td><td align="left"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>&lt;数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>存储过程 Oracle MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/02/hello-world/"/>
    <url>/2023/04/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到我的个人博客</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
